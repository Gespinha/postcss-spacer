var postcss = require('postcss');

module.exports = postcss.plugin('spacer', function spacer(options) {
  "use strict";

  return function (css) {

    // options
    options = options || {
      'all': {
        'pattern': false,
        'before': false,
        'after': false
      },
      'comments': {
        'pattern': false,
        'before': false,
        'after': 1
      },
      'rules': {
        'pattern': false,
        'before': false,
        'after': 1
      },
      'declarations': {
        'pattern': false,
        'before': false,
        'after': false
      },
      'at-rules': {
        'pattern': false,
        'before': false,
        'after': false
      }
    };
    var updateCount = 0;

    // status logs
    function statusLog(type, count, patternCount){
      type = (count > 1 || type === 'all conditions' ? type : type.slice(0, -1));

      var message = 'Updated ' + count + ' ' + type + (count === 1 ? 's' : '');
      if(patternCount){
        message += ' from ' + patternCount + ' pattern' + (patternCount > 1 ? 's' : '');
      }

      return console.log(message);
    }

    // helper functions
    function addLineSpace(type, position){
      return new Array(options[type][position] + 2).join('\n');
    }

    // update line
    function updateLine(type, line){
      if(options[type]['before'] && css.nodes[0] !== line){
        line.raws.before = addLineSpace(type, 'before');
      }
      if(options[type]['after'] && line.next() !== undefined){
        line.next().raws.before = addLineSpace(type, 'after');
      }
      return updateCount++;
    }

    // update line with patterns
    function updateLinePattern(type, line, patternList){
      var updateComment = false;

      for(var i = 0; i < patternList.length && !updateComment; i++){
        if(line.toString().indexOf(patternList[i]) > -1){
          updateComment = true;
          updateLine(type, line);
        }
      }
    }

    // run process
    function runProcess(type){
      var pattern = options[type].pattern;

      if(!pattern){

        css.walkComments(function(comment){
          updateLine(type, comment);
        });
        statusLog(type, updateCount, false);

      } else if(Array.isArray(pattern) && pattern.length > 0){

        css.walkComments(function(comment){
          updateLinePattern(type, comment, pattern);
        });
        statusLog(type, updateCount, pattern.length);

      } else {

        console.log('Comment Pattern options value must be an object');

      }
    }

    // run all processes
    var activeProcesses = Object.keys(options);

    for(var i = 0; i < activeProcesses.length; i++){
      runProcess(activeProcesses[i]);
    }
  }
});